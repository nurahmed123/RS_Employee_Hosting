import { BsPostcard } from "react-icons/bs";
import { RiDeleteBin6Fill } from "react-icons/ri";
import { FaEdit } from "react-icons/fa";
import useFetchData from "@/hooks/useFetchData";
import { useState, useEffect, useMemo } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import Aside from "@/components/Aside";
import { jwtDecode } from "jwt-decode";
import Head from "next/head";

export default function Blogs() {
    const router = useRouter();
    const [user, setUser] = useState({ value: null });
    const [author, setAuthor] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [perPage, setPerPage] = useState(5); // Default number of blogs per page
    const [searchQuery, setSearchQuery] = useState('');

    useEffect(() => {
        const checkUser = () => {
            try {
                const token = localStorage.getItem("Token");
                if (token) {
                    const JWTData = jwtDecode(token);
                    setAuthor(JWTData.data._id); // Set author from JWT
                    setUser(JWTData.data); // Set user data if needed
                } else {
                    router.push('/'); // Redirect if no token is found
                }
            } catch (err) {
                console.error(err);
                router.push('/'); // Redirect on error
            }
        };
        checkUser();
    }, [router]);

    // Fetch all blogs on component load
    const { alldata: allBlogs, loading } = useFetchData(`/api/blogs?author=${author}`);

    // Filter blogs by author first, then by search query
    const filteredBlogs = useMemo(() => {
        const authorBlogs = allBlogs.filter(blog => blog.author === author);
        if (searchQuery.trim() === '') return authorBlogs; // If no search query, return author's blogs
        return authorBlogs.filter(blog =>
            blog.title.toLowerCase().includes(searchQuery.toLowerCase())
        );
    }, [searchQuery, allBlogs, author]);

    // Calculate total number of filtered blogs
    const totalFilteredBlogs = filteredBlogs.length;

    // Calculate the currently displayed blogs with pagination logic
    const indexOfFirstBlog = (currentPage - 1) * perPage;
    const indexOfLastBlog = currentPage * perPage;
    const currentBlogs = filteredBlogs.slice(indexOfFirstBlog, indexOfLastBlog);

    // Pagination page numbers calculation
    const pageNumbers = useMemo(() => {
        const totalPages = Math.ceil(totalFilteredBlogs / perPage);
        return Array.from({ length: totalPages }, (_, i) => i + 1);
    }, [totalFilteredBlogs, perPage]);

    // Paginate function to change page
    const paginate = (pageNumber) => {
        if (pageNumber > 0 && pageNumber <= pageNumbers.length) {
            setCurrentPage(pageNumber);
        }
    };

    if (user.value === null) {
        return null; // Prevent rendering if user data is not yet available
    }

    return (
        <>
            <Head>
                <title>Your Blogs | RoboSuperior</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Aside />
            <div className="max-[1043px]:!m-0 blogpage md:!px-4 ">
                <div className="titledashboard flex flex-sb">
                    <div data-aos="fade-right">
                        <h2 className="dark:!text-[#6466f1]">Your All<span className="dark:!text-gray-100"> Blogs</span></h2>
                        <h3 className="dark:text-[#6466f1]">ADMIN PANEL</h3>
                    </div>
                    <div className="breadcrumb dark:text-[#6466f1]" data-aos="fade-left">
                        <BsPostcard className="dark:text-[#6466f1]" /> <span className="dark:text-[#6466f1]">/</span><span><Link className="underline dark:text-[#6466f1]" href="/dashboard/blogs/addblog" >Add Blogs</Link></span>
                    </div>
                </div>
                <div className="blogstable mt-6">
                    <div className="flex flex-wrap gap-2 mb-4 items-center" data-aos="fade-left">
                        <h2 className="dark:text-gray-100">Search Blogs: </h2>
                        <input
                            type="text"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            placeholder="Search by title..."
                            className="dark:text-gray-200 dark:bg-[#2d3748] p-2 rounded-md w-full md:w-auto sm:flex-grow"
                        />
                        <select
                            value={perPage}
                            onChange={(e) => {
                                setPerPage(Number(e.target.value)); // Update perPage based on dropdown selection
                                setCurrentPage(1); // Reset to first page when perPage changes
                            }}
                            className="w-full md:w-auto block p-4 border-gray-300 rounded-md shadow-sm dark:border-gray-600 bg-slate-100 dark:bg-[#2d3748] dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-[#6466f1] focus:border-transparent sm:flex-grow"
                        >
                            <option className="cursor-pointer" value={5}>5</option>
                            <option className="cursor-pointer" value={10}>10</option>
                            <option className="cursor-pointer" value={15}>15</option>
                            <option className="cursor-pointer" value={20}>20</option>
                            <option className="cursor-pointer" value={50}>50</option>
                        </select>

                    </div>

                    <div className="overflow-x-auto">
                        <table className="min-w-full table-auto border-collapse rounded-lg overflow-hidden shadow-lg dark:bg-[#2d3748]">
                            <thead className="bg-[#6466f1] text-white dark:bg-[#6466f1]">
                                <tr>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">#</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Title</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Slug</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Status</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Edit / Delete</th>
                                </tr>
                            </thead>
                            <tbody>
                                {loading ? (
                                    <tr>
                                        <td colSpan="5" className="text-center py-4 dark:!bg-[#2d3748] dark:!text-gray-100">Loading...</td>
                                    </tr>
                                ) : (
                                    <>
                                        {currentBlogs.length === 0 ? (
                                            <tr>
                                                <td colSpan="5" className="text-center py-4 dark:!bg-[#2d3748] dark:!text-gray-100">No Blogs Available</td>
                                            </tr>
                                        ) : (
                                            currentBlogs.map((blog, index) => (
                                                <tr key={blog._id} className="border-b dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg">
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg">{indexOfFirstBlog + index + 1}</td>
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg break-words">{blog.title}</td>
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg break-words">{blog.slug}</td>
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg">{blog.status || 'Draft'}</td>
                                                    <td className="px-4 py-2">
                                                        <div className="flex gap-2">
                                                            <Link href={`/dashboard/blogs/edit/${blog._id}`}>
                                                                <button className="dark:text-gray-100 dark:bg-[radial-gradient(black,transparent)] dark:hover:!bg-[#424f85] hover:!border-[#38457b]">
                                                                    <FaEdit /> Edit
                                                                </button>
                                                            </Link>
                                                            <Link href={`/dashboard/blogs/delete/${blog._id}`}>
                                                                <button className="dark:text-gray-100 dark:bg-red-500">
                                                                    <RiDeleteBin6Fill /> Delete
                                                                </button>
                                                            </Link>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))
                                        )}
                                    </>
                                )}
                            </tbody>
                        </table>
                    </div>


                    {totalFilteredBlogs > 0 && (
                        <div className="blogpagination mt-4 flex justify-center gap-2">
                            <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1} className="px-4 py-2 border rounded-md">Previous</button>
                            {pageNumbers.map(number => (
                                <button
                                    key={number}
                                    onClick={() => paginate(number)}
                                    className={`px-4 py-2 border rounded-md ${currentPage === number ? 'bg-gray-300 dark:bg-gray-700' : ''}`}
                                >
                                    {number}
                                </button>
                            ))}
                            <button onClick={() => paginate(currentPage + 1)} disabled={currentPage === pageNumbers.length} className="px-4 py-2 border rounded-md">Next</button>
                        </div>
                    )}
                </div>
            </div>
        </>
    );
}
